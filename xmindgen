#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Create on: 2023/01/20 08:09:04
# Author   : fzzjj2008
"""
xmind document generate tool
"""
from abc import ABC, abstractmethod
import os
import sys
import argparse
import textwrap
import xmind
import json
import yaml
import xmltodict


TOPIC_KEY = "name"
CHILD_KEY = "children"
INDENT = 2


class GenerateBase(ABC):
    """
    Generate Base Class
    """
    def __init__(self, genfile):
        self.genfile = genfile
        self.data = dict()

    @classmethod
    def gen(cls, topic, data):
        for key, val in data.items():
            if key == TOPIC_KEY:
                topic.setTitle(val)
            elif key == CHILD_KEY and isinstance(val, list):
                for d in val:
                    sub_topic = topic.addSubTopic()
                    cls.gen(sub_topic, d)        

    def generate(self):
        if not isinstance(self.data, dict):
            print("generate xmind fail: data is not dict type")
            exit(1)
        print(json.dumps(self.data, indent=2))  # for debug
        # generate xmind file
        document = xmind.load(self.genfile)
        sheet = document.getPrimarySheet()
        sheet.setTitle(self.data.get(TOPIC_KEY, "Sheet 1"))
        root_topic = sheet.getRootTopic()
        self.gen(root_topic, self.data)
        xmind.save(document)

    @abstractmethod
    def genData(self, originfile):
        raise NotImplementedError


class SimpleGenerate(GenerateBase):
    """
    Generate xmind document
    """
    def genData(self, originfile):
        self.data = {}
        try:
            with open(originfile, 'r', encoding='utf-8') as f:
                self.data = self.parseData(f.readlines(), 0)
        except Exception as err:
            print("Decode file error: %s" % err)

    @staticmethod
    def getLayer(line):
        # count of prefix spaces
        count = 0
        for ch in line:
            if ch.isspace():
                count += 1
            else:
                break
        return count

    @classmethod
    def parseData(cls, lines, layer):
        output = {}
        output[CHILD_KEY] = []
        group = []
        for line in lines:
            curLayer = cls.getLayer(line)
            # add topic
            if curLayer == layer:
                output[TOPIC_KEY] = line.lstrip(' ').rstrip('\n')
            # devide into groups then add child
            elif curLayer == layer+INDENT:
                if group:
                    child = cls.parseData(group, layer+INDENT)
                    output[CHILD_KEY].append(child)
                    group = []
                group.append(line)
            elif curLayer > layer:
                group.append(line)
            else:
                # may not reach here
                raise Exception("format error")

        if group:
            child = cls.parseData(group, layer+INDENT)
            output[CHILD_KEY].append(child)
        return output


class JsonGenerate(GenerateBase):
    """
    Generate xmind document from json file
    """
    def genData(self, originfile):
        self.data = {}
        try:
            with open(originfile, 'r', encoding='utf-8') as f:
                self.data = json.load(f)
        except Exception as err:
            print("Decode json file error: %s" % err)


class XmlGenerate(GenerateBase):
    """
    Generate xmind document from xml file
    """
    def genData(self, originfile):
        self.data = {}
        try:
            with open(originfile, 'r', encoding='utf-8') as f:
                xml = f.read()
                self.data = xmltodict.parse(xml)
                # remove root node
                self.data = self.data.get("root")
                if not isinstance(self.data, dict):
                    print("Decode xml file error: data is not dict type")
                    exit(1)
                # remove redundant fields
                self.data = self._parseDict(self.data)
        except Exception as err:
            print("Decode xml file error: %s" % err)

    @classmethod
    def _parseDict(cls, data):
        output = {}
        for key, val in data.items():
            if key == TOPIC_KEY:
                output[TOPIC_KEY] = val.get("#text", "")
            elif key == CHILD_KEY:
                children = val.get("item")
                output[CHILD_KEY] = []
                for d in children:
                    output[CHILD_KEY].append(cls._parseDict(d))
        return output


class YamlGenerate(GenerateBase):
    """
    Generate xmind document from yaml file
    """
    def genData(self, originfile):
        self.data = {}
        try:
            with open(originfile, 'r', encoding='utf-8') as f:
                self.data = yaml.load(f, Loader=yaml.FullLoader)
        except Exception as err:
            print("Decode yaml file error: %s" % err)


def checkfile(originfile, genfile, force):
    if not os.path.exists(originfile):
        print(f"'{originfile}' not exist")
        exit(1)
    if os.path.exists(genfile):
        if force:
            os.remove(genfile)
        else:
            while True:
                msg = input(f"xmindgen: overwrite '{genfile}'? [y/N] ").strip().lower()
                if msg in ['y', 'yes']:
                    os.remove(genfile)
                    break
                elif msg in ['n', 'no']:
                    exit(0)


def xmindgen(originfile, genfile, format, force):
    gen = {
        "simple": SimpleGenerate,
        "json": JsonGenerate,
        "xml": XmlGenerate,
        "yaml": YamlGenerate,
    }
    checkfile(originfile, genfile, force)
    gen_clazz = gen[format](genfile)
    gen_clazz.genData(originfile)
    return gen_clazz.generate()


if __name__ == '__main__':
    PARSER = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent("""\
        xmind document generate tool

        Examples:
          xmindgen [-f simple] test.txt test.xmind  generate test.xmind
          xmindgen -f json test.json test.xmind     generate test.xmind from json file
          xmindgen -f xml test.xml test.xmind       generate test.xmind from xml file
          xmindgen -f yaml test.yaml test.xmind     generate test.xmind from yaml file"""))

    PARSER.add_argument('-f', '--format', nargs='?', default='simple',
                        choices=['simple', 'json', 'xml', 'yaml'],
                        help='document format')
    PARSER.add_argument('--force', action = "store_true",
                        help='if genfile exists, remove and overwrite it')
    PARSER.add_argument('originfile', help='origin document name')
    PARSER.add_argument('genfile', help='genfile document name')

    sys.argv.pop(0)
    ARGS = vars(PARSER.parse_args(sys.argv))

    if not ARGS.get('genfile').endswith(".xmind"):
        print("Generate xmind file is missing the '.xmind' extension!")
        exit(1)

    xmindgen(originfile=ARGS.get('originfile'),
             genfile=ARGS.get('genfile'),
             format=ARGS.get('format'),
             force=ARGS.get('force'))
    exit(0)
